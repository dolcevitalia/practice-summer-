#include <iostream>
#include <locale.h>
#include <cmath>
#include "GnuP.h"
#include <fstream>
using namespace std;

double* slau(double** A, double* Y, int n) {
double* x, maxn;
int k, index;
const double eps = 0.00001;
x = new double[n];
k = 0;
while (k < n) {
maxn = abs(A[k][k]);
index = k;
for (int i = k + 1; i < n; i++)
if (abs(A[i][k]) > maxn) {
maxn = abs(A[i][k]);
index = i;
}
for (int j = 0; j < n; j++) {
double temp = A[k][j];
A[k][j] = A[index][j];
A[index][j] = temp;
}
double temp = Y[k];
Y[k] = Y[index];
Y[index] = temp;

for (int i = k; i < n; i++) {
double temp = A[i][k];
if (abs(temp) < eps) continue;
for (int j = 0; j < n; j++)
A[i][j] = A[i][j] / temp;
Y[i] = Y[i] / temp;
if (i == k)
continue;
for (int j = 0; j < n; j++)
A[i][j] = A[i][j] - A[k][j];
Y[i] = Y[i] - Y[k];
}
k++;
}
for (k = n - 1; k >= 0; k--) {
x[k] = Y[k];
for (int i = 0; i < k; i++)
Y[i] = Y[i] - A[i][k] * x[k];
}
return x;
}

int main() {
setlocale(LC_ALL, "Rus");
double * x, * y, * A, ** Z, * L, A1[2], * S, M, summa = 0;
int N = 2, n = 8;

ifstream f("mean.txt");
x = new double[n];
y = new double[n];
if (f.is_open()) {
cout << "Заданные значения X и Y:" << endl;
for (int i = 0; i < n; i++) {
f >> x[i];
f >> y[i];
cout << "x" << i + 1 << " = " << x[i] << ";" << " ";
cout << "y" << i + 1 << " = " << y[i] << endl;
}
f.close();

Z = new double* [N];
L = new double[N];
A = new double[N];

for(int i =0; i < N; i++)
   Z[i] = new double[N];

Z[0][0] = n;
Z[0][1] = 0;
Z[1][0] = 0;
Z[1][1] = 0;
L[0] = 0;
L[1] = 0;

for (int i = 0; i < n; i++) {
Z[0][1] += x[i] * x[i];
Z[1][0] += x[i] * x[i];
Z[1][1] += pow(x[i], 4);
L[0] += y[i];
L[1] += y[i] * x[i] * x[i];
}
A = slau(Z, L, N);

cout << endl;
cout << "Коэффициенты C и k: ";

A1[0] = 0;
A1[1] = 0;
double F1 = 0, F2 = 0, F3 = 0, m1 = 0, m2 = 0;

for (int i = 0; i < 2; i++) {
F1 += x[i] * y[i];
F2 += x[i];
F3 += y[i];
m1 += x[i] * x[i];
m2 += x[i];
if (i == 1) {
A1[1] = (n * F1 - F2 * F3) / (n * m1 - m2 * m2);
A1[0] = F3 / n - A1[1] * m2 / n;
}
}

for (int i = 0; i < N; i++)
    cout << A[i] << " ";

cout << endl;

double R = 0;
for (int i = 0; i < n; i++) {
double F = 0, P1 = 0, P2 = 0;
F += (x[i] - P1) * (y[i] - P2);
P1 += (x[i] - P1) * (x[i] - P2);
P2 += (y[i] - P2) * (y[i] - P2);
if (i == n - 1)
R = F / sqrt(P1 * P2);
}
cout << "Коэффициент корреляции r = " << R << endl;

cout << "Линия регрессии у = " << A1[0] << " + " << A1[1] << "х" << endl;

double Bx = 0, By = 0;
for (int i = 0; i < n; i++) {
Bx += x[i]; By += y[i];
if (i == n - 1) {
Bx /= n;
By /= n;
}
}

S = new double[n];
for (int i = 0; i < n; i++)
S[i] = A1[0] + A1[1] * x[i];
for (int i = 0; i < n; i++)
summa += (y[i] - S[i]) * (y[i] - S[i]);
M = summa / n;

cout << "Средняя ошибка для линии регрессии и подобранной функции = " << M << endl;

cout << "Суммарная квадратичная ошибка для линии регрессии и подобранной функции = " << summa << endl;

GnuP p;
p.plotArray(n, x, y);
p.plotArrayPar(n, x, y,3,2,7,"точки");
double X1[100], Y1[100], Y2[100];
for (int i = 0; i < 100; i++) {
X1[i] = i/ 25.0;
Y1[i] = A1[0] + X1[i] * A1[1];
Y2[i] = A[0] + A[1] * X1[i] * X1[i];
}
p.plotArray(100, X1, Y1, Y2);
p.plot();
return 0;

}
else cout << "Такого файла не существует.";
}
